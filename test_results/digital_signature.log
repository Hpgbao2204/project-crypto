=== Test: digital_signature ===
Date: Wed May 28 02:22:36 EDT 2025
Command: cd /home/ubuntu/martsia_project/web_app && python3 -c "
from src.main import app, db
from src.models.user import User
from src.models.document import Document
from src.services.signature_service import SignatureService
from src.services.document_service import DocumentService
import os

with app.app_context():
    # Get test users
    admin_user = User.query.filter_by(username='admin_user').first()
    doctor_user = User.query.filter_by(username='doctor_user').first()
    
    if not admin_user or not doctor_user:
        print('Test users not found')
        exit(1)
    
    # Get admin's original documents
    admin_docs = Document.query.filter_by(user_id=admin_user.id, doc_type='original').all()
    
    if not admin_docs:
        print('No documents found for admin user')
        exit(1)
    
    # Create services
    signature_service = SignatureService()
    document_service = DocumentService(db)
    
    # Test signing document
    doc_to_sign = admin_docs[0]
    
    signature_path, metadata = signature_service.sign_document(
        doc_to_sign.get_file_path(),
        str(admin_user.id),
        'password123',
        admin_user.private_key_encrypted
    )
    
    if not signature_path:
        print('Signing failed')
        exit(1)
    
    # Save signed document
    signed_doc = document_service.save_signed_document(
        doc_to_sign.id,
        os.path.basename(signature_path),
        admin_user.id
    )
    
    print(f'Signed document: {signed_doc.original_filename}, ID: {signed_doc.id}')
    
    # Test verifying signature (should succeed)
    is_valid = signature_service.verify_signature(
        signed_doc.get_file_path(),
        signed_doc.get_signature_path(),
        admin_user.public_key
    )
    
    if is_valid:
        print('✅ Signature verification succeeded with correct key')
    else:
        print('❌ Signature verification failed with correct key')
    
    # Test verifying with wrong key (should fail)
    is_valid = signature_service.verify_signature(
        signed_doc.get_file_path(),
        signed_doc.get_signature_path(),
        doctor_user.public_key
    )
    
    if not is_valid:
        print('✅ Signature verification correctly failed with wrong key')
    else:
        print('❌ Signature verification incorrectly succeeded with wrong key')
    
    print('Digital signature tests completed')
"
---
Signed document: test_document.pdf, ID: 2
✅ Signature verification succeeded with correct key
✅ Signature verification correctly failed with wrong key
Digital signature tests completed
Exit status: 0
PASS
